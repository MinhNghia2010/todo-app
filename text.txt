(() => {
	'use strict';

	const STORAGE_KEY = 'todo-app-items';

	const form = document.querySelector('form');
	const input = document.getElementById('todo-input');
	const list = document.getElementById('todo-list');

	const genId = () => `todo-${Date.now()}-${Math.random().toString(36).slice(2, 8)}`;

	let todos = [];

	function save() {
		localStorage.setItem(STORAGE_KEY, JSON.stringify(todos));
	}

	function load() {
		const raw = localStorage.getItem(STORAGE_KEY);
		if (raw) {
			try {
				const arr = JSON.parse(raw);
				if (Array.isArray(arr)) {
					todos = arr;
					return;
				}
			} catch (_) {
				// ignore parse errors and fall back to seeding
			}
		}
		// Seed from existing DOM if present (first run), otherwise start empty
		const seed = Array.from(list.querySelectorAll('li.todo')).map((li) => {
			const checkbox = li.querySelector('input[type="checkbox"]');
			const textLabel = li.querySelector('.todo-text');
			return {
				id: genId(),
				text: (textLabel?.textContent || '').trim(),
				completed: !!(checkbox?.checked),
			};
		});
		todos = seed;
		save();
	}

	function createTodoElement(t) {
		const li = document.createElement('li');
		li.className = 'todo';
		li.dataset.id = t.id;

		const checkbox = document.createElement('input');
		checkbox.type = 'checkbox';
		checkbox.id = t.id;
		checkbox.checked = !!t.completed;

		const custom = document.createElement('label');
		custom.className = 'custom-checkbox';
		custom.setAttribute('for', t.id);
		const icon = document.createElement('i');
		icon.className = 'fa-solid fa-check';
		custom.appendChild(icon);

		const textLabel = document.createElement('label');
		textLabel.className = 'todo-text';
		textLabel.setAttribute('for', t.id);
		textLabel.textContent = t.text;

		const delBtn = document.createElement('button');
		delBtn.className = 'delete-button';
		const delIcon = document.createElement('i');
		delIcon.className = 'fa-solid fa-trash';
		delBtn.appendChild(delIcon);

		li.appendChild(checkbox);
		li.appendChild(custom);
		li.appendChild(textLabel);
		li.appendChild(delBtn);

		return li;
	}

	function render() {
		list.innerHTML = '';
		for (const t of todos) {
			list.appendChild(createTodoElement(t));
		}
	}

	function addTodo(text) {
		const todo = { id: genId(), text, completed: false };
		todos.push(todo);
		save();
		list.appendChild(createTodoElement(todo));
	}

	function removeTodo(id) {
		const idx = todos.findIndex((t) => t.id === id);
		if (idx !== -1) {
			todos.splice(idx, 1);
			save();
			const li = list.querySelector(`li.todo[data-id="${id}"]`);
			li?.remove();
		}
	}

	function toggleTodo(id, completed) {
		const t = todos.find((t) => t.id === id);
		if (t) {
			t.completed = !!completed;
			save();
		}
	}

	// Events
	form.addEventListener('submit', (e) => {
		e.preventDefault();
		const text = input.value.trim();
		if (!text) return;
		addTodo(text);
		input.value = '';
		input.focus();
	});

	list.addEventListener('change', (e) => {
		const target = e.target;
		if (target && target.matches('input[type="checkbox"]')) {
			toggleTodo(target.id, target.checked);
		}
	});

	list.addEventListener('click', (e) => {
		const btn = e.target.closest('.delete-button');
		if (btn) {
			const li = btn.closest('li.todo');
			if (li) removeTodo(li.dataset.id);
		}
	});

	// Init
	load();
	render();
})();